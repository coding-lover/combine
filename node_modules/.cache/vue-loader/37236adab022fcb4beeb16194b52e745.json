{"remainingRequest":"/data/www/kit/www/Public/kit-test/node_modules/vue-loader/lib/index.js??vue-loader-options!/data/www/kit/www/Public/kit-test/src/components/page/AccountsNew.vue?vue&type=style&index=0&id=4d2b596c&scoped=true&lang=css&","dependencies":[{"path":"/data/www/kit/www/Public/kit-test/src/components/page/AccountsNew.vue","mtime":1610369484298},{"path":"/data/www/kit/www/Public/kit-test/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/data/www/kit/www/Public/kit-test/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/data/www/kit/www/Public/kit-test/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/data/www/kit/www/Public/kit-test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/data/www/kit/www/Public/kit-test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nh1{\r\n    text-align: center;\r\n    margin: 30px 0;\r\n}\r\np{\r\n    line-height: 30px;\r\n    margin-bottom: 10px;\r\n    text-indent: 2em;\r\n}\r\n.logout{\r\n    color: #409EFF;\r\n}\r\n.mt-5 {\r\n    margin-top: 5px;\r\n}\r\n\r\n.el-row {\r\n    margin-bottom: 20px;\r\n\r\n}\r\n.el-col {\r\n    border-radius: 4px;\r\n}\r\n.bg-purple-dark {\r\n    background: #99a9bf;\r\n}\r\n.bg-purple {\r\n    background: #d3dce6;\r\n}\r\n.bg-purple-light {\r\n    background: #e5e9f2;\r\n}\r\n.grid-content {\r\n    border-radius: 4px;\r\n    min-height: 36px;\r\n}\r\n.row-bg {\r\n    padding: 10px 0;\r\n    background-color: #f9fafc;\r\n}\r\n",{"version":3,"sources":["AccountsNew.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AccountsNew.vue","sourceRoot":"src/components/page","sourcesContent":["<template>\r\n\r\n<div>\r\n    <el-row :gutter=\"5\">\r\n        <el-col :span=\"spot.colSpan\" v-for=\"params in spot.config\">\r\n            <accounts-test-unit :title=\"params.title\" :func=\"params.func\" :rules=\"params.rules\">\r\n                <template v-slot:u-code>{{params.code}}</template>\r\n            </accounts-test-unit>\r\n        </el-col>\r\n    </el-row>\r\n\r\n    <el-row :gutter=\"5\">\r\n        <el-col :span=\"future.colSpan\" v-for=\"params in future.config\">\r\n            <accounts-test-unit :title=\"params.title\" :func=\"params.func\" :rules=\"params.rules\">\r\n                <template v-slot:u-code>{{params.code}}</template>\r\n            </accounts-test-unit>\r\n        </el-col>\r\n    </el-row>\r\n\r\n    <el-row :gutter=\"5\">\r\n        <el-col :span=\"swap.colSpan\" v-for=\"params in swap.config\">\r\n            <accounts-test-unit :title=\"params.title\" :func=\"params.func\" :rules=\"params.rules\">\r\n                <template v-slot:u-code>{{params.code}}</template>\r\n            </accounts-test-unit>\r\n        </el-col>\r\n    </el-row>\r\n</div>\r\n\r\n</template>\r\n\r\n\r\n<script>\r\n    import AccountsTestUnit from \"../common/AccountsTestUnit\";\r\n    export default {\r\n\r\n        data () {\r\n            return {\r\n                spot: {\r\n                    colSpan: 8,\r\n                    config: [\r\n                        {\r\n                            title: '现货资产',\r\n                            func: 'getSpotBalanceById',\r\n\r\n                            rules: [\r\n                                {\r\n                                    type:'input',\r\n                                    field:'taid',\r\n                                    title:'账号Id',\r\n                                    validate: [{required: true, message:'不能为空'}]\r\n                                }\r\n                            ],\r\n                            code: `public function getSpotBalanceById($taid)\r\n    {\r\n        try {\r\n            $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\r\n            if(empty($exInfo))\r\n                throw new \\\\Exception('账户不存在22.');\r\n\r\n            $balance = $this->getPositionSpot(self::ALL_SYMBOL, $exInfo);\r\n\r\n            return $this->ret($balance);\r\n        } catch (\\\\Exception $e) {\r\n            return $this->err($e->getMessage());\r\n        }\r\n    }`,\r\n                        },\r\n                        {\r\n                            title: '杠杆资产',\r\n                            func: 'getMarginBalanceById',\r\n\r\n                            rules: [\r\n                                {\r\n                                    type:'input',\r\n                                    field:'taid',\r\n                                    title:'账号Id',\r\n                                    validate: [{required: true, message:'不能为空'}]\r\n                                }\r\n                            ],\r\n                            code: `public function getMarginBalanceById($taid)\r\n    {\r\n        try {\r\n            $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\r\n            if(empty($exInfo))\r\n                throw new \\\\Exception('账户不存在.');\r\n\r\n            $balance = $this->getMarginBalance(self::ALL_SYMBOL, $exInfo, true);\r\n\r\n            return $this->ret($balance);\r\n        } catch (\\\\Exception $e) {\r\n            return $this->err($e->getMessage());\r\n        }\r\n    }`,\r\n                        },\r\n                        {\r\n                            title: '杠杆信息',\r\n                            func: 'getMarginInfoById',\r\n\r\n                            rules: [\r\n                                {\r\n                                    type:'input',\r\n                                    field:'taid',\r\n                                    title:'账号Id',\r\n                                    validate: [{required: true, message:'不能为空'}]\r\n                                },\r\n                                {\r\n                                    type:'select',\r\n                                    field:'mode',\r\n                                    title:'模式',\r\n                                    value: 'all',\r\n                                    options: [\r\n                                        {value: 'all', label: '全部'},\r\n                                        {value: 'crossed', label: '全仓'},\r\n                                        {value: 'fixed', label: '逐仓'},\r\n                                    ],\r\n                                    validate: [{required: true, message:'不能为空'}]\r\n                                },\r\n\r\n                            ],\r\n                            code: `/**\r\n     * @desc\r\n     * @param $taid\r\n     * @param string $mode [ all | fixed | crossed ]\r\n     * @author wmc\r\n     * @date 2019-11-15 11:49\r\n     * \"fixed\" => [...],\r\n     * \"crossed\" => [...],\r\n     */\r\n    public function getMarginInfoById($taid, $mode = 'all')\r\n    {\r\n        try {\r\n            $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\r\n            if(empty($exInfo))\r\n                throw new \\\\Exception('账户不存在.');\r\n\r\n            $balance = $this->AccountSource->fetchMarginBalanceRaw($exInfo);\r\n\r\n            return $this->ret($balance);\r\n        } catch (\\\\Exception $e) {\r\n            return $this->err($e->getMessage());\r\n        }\r\n    }`,\r\n                        },\r\n\r\n                    ]\r\n                },\r\n\r\n                future: {\r\n                    colSpan: 12,\r\n                    config: [\r\n                        {\r\n                            title: '交割资产',\r\n                            func: 'getFutureBalanceById',\r\n\r\n                            rules: [\r\n                                {\r\n                                    type:'input',\r\n                                    field:'taid',\r\n                                    title:'账号Id',\r\n                                    validate: [{required: true, message:'不能为空'}]\r\n                                }\r\n                            ],\r\n                            code: `/**\r\n     * @desc  期货\r\n     * @param $taid\r\n     * @author wmc\r\n     * @date 2019-11-06 17:28\r\n     */\r\n    public function getFutureBalanceById($taid)\r\n    {\r\n        try {\r\n            $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\r\n            if(empty($exInfo))\r\n                throw new \\\\Exception('账户不存在.');\r\n\r\n            $balance = $this->getFutureBalance(self::ALL_SYMBOL, $exInfo);\r\n\r\n            return $this->ret($balance);\r\n        } catch (\\\\Exception $e) {\r\n            return $this->err($e->getMessage());\r\n        }\r\n    }`,\r\n                        },\r\n                        {\r\n                            title: '交割仓位',\r\n                            func: 'getFuturePositionAllById',\r\n\r\n                            rules: [\r\n                                {\r\n                                    type:'input',\r\n                                    field:'taid',\r\n                                    title:'账号Id',\r\n                                    validate: [{required: true, message:'不能为空'}]\r\n                                }\r\n                            ],\r\n                            code: `/**\r\n     * @desc  期货仓位 all\r\n     * @param $taid\r\n     * @author wmc\r\n     * @date 2019-11-06 17:36\r\n     */\r\n    public function getFuturePositionAllById($taid)\r\n    {\r\n        try {\r\n            $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\r\n            if(empty($exInfo))\r\n                throw new \\\\Exception('账户不存在.');\r\n\r\n            $position = $this->getPositionFutureAll($exInfo);\r\n\r\n            return $this->ret($position);\r\n        } catch (\\\\Exception $e) {\r\n            return $this->err($e->getMessage());\r\n        }\r\n    }`,\r\n                        },\r\n                    ],\r\n                },\r\n\r\n                swap: {\r\n                    colSpan: 12,\r\n                    config: [\r\n                        {\r\n                            title: '永续资产',\r\n                            func: 'getSwapBalanceById',\r\n\r\n                            rules: [\r\n                                {\r\n                                    type:'input',\r\n                                    field:'taid',\r\n                                    title:'账号Id',\r\n                                    validate: [{required: true, message:'不能为空'}]\r\n                                }\r\n                            ],\r\n                            code: `/**\r\n     * @desc  永续\r\n     * @param $taid\r\n     * @author wmc\r\n     * @date 2019-11-06 17:28\r\n     */\r\n    public function getSwapBalanceById($taid)\r\n    {\r\n        try {\r\n            $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\r\n            if(empty($exInfo))\r\n                throw new \\\\Exception('账户不存在.');\r\n\r\n            $balance = $this->getSwapBalance(self::ALL_SYMBOL, $exInfo);\r\n\r\n            return $this->ret($balance);\r\n        } catch (\\\\Exception $e) {\r\n            return $this->err($e->getMessage());\r\n        }\r\n    }`,\r\n                        },\r\n                        {\r\n                            title: '永续仓位',\r\n                            func: 'getSwapPositionAllById',\r\n\r\n                            rules: [\r\n                                {\r\n                                    type:'input',\r\n                                    field:'taid',\r\n                                    title:'账号Id',\r\n                                    validate: [{required: true, message:'不能为空'}]\r\n                                }\r\n                            ],\r\n                            code: `/**\r\n     * @desc  永续仓位 all\r\n     * @param $taid\r\n     * @author wmc\r\n     * @date 2019-11-06 17:34\r\n     */\r\n    public function getSwapPositionAllById($taid)\r\n    {\r\n        try {\r\n            $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\r\n            if(empty($exInfo))\r\n                throw new \\\\Exception('账户不存在.');\r\n\r\n            $position = $this->getPositionSwapAll($exInfo);\r\n\r\n            return $this->ret($position);\r\n        } catch (\\\\Exception $e) {\r\n            return $this->err($e->getMessage());\r\n        }\r\n    }`,\r\n                        },\r\n                    ],\r\n                }\r\n            }\r\n        },\r\n        components: {\r\n            AccountsTestUnit,\r\n        },\r\n        methods: {\r\n\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\nh1{\r\n    text-align: center;\r\n    margin: 30px 0;\r\n}\r\np{\r\n    line-height: 30px;\r\n    margin-bottom: 10px;\r\n    text-indent: 2em;\r\n}\r\n.logout{\r\n    color: #409EFF;\r\n}\r\n.mt-5 {\r\n    margin-top: 5px;\r\n}\r\n\r\n.el-row {\r\n    margin-bottom: 20px;\r\n\r\n}\r\n.el-col {\r\n    border-radius: 4px;\r\n}\r\n.bg-purple-dark {\r\n    background: #99a9bf;\r\n}\r\n.bg-purple {\r\n    background: #d3dce6;\r\n}\r\n.bg-purple-light {\r\n    background: #e5e9f2;\r\n}\r\n.grid-content {\r\n    border-radius: 4px;\r\n    min-height: 36px;\r\n}\r\n.row-bg {\r\n    padding: 10px 0;\r\n    background-color: #f9fafc;\r\n}\r\n</style>\r\n"]}]}