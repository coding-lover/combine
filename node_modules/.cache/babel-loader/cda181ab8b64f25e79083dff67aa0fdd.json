{"remainingRequest":"/data/www/kit/www/Public/kit-test/node_modules/thread-loader/dist/cjs.js!/data/www/kit/www/Public/kit-test/node_modules/babel-loader/lib/index.js!/data/www/kit/www/Public/kit-test/node_modules/cache-loader/dist/cjs.js??ref--0-0!/data/www/kit/www/Public/kit-test/node_modules/vue-loader/lib/index.js??vue-loader-options!/data/www/kit/www/Public/kit-test/src/components/page/AccountsNew.vue?vue&type=script&lang=js&","dependencies":[{"path":"/data/www/kit/www/Public/kit-test/src/components/page/AccountsNew.vue","mtime":1610369484298},{"path":"/data/www/kit/www/Public/kit-test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/data/www/kit/www/Public/kit-test/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/data/www/kit/www/Public/kit-test/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/data/www/kit/www/Public/kit-test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/data/www/kit/www/Public/kit-test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport AccountsTestUnit from \"../common/AccountsTestUnit\";\nexport default {\n  data: function data() {\n    return {\n      spot: {\n        colSpan: 8,\n        config: [{\n          title: '现货资产',\n          func: 'getSpotBalanceById',\n          rules: [{\n            type: 'input',\n            field: 'taid',\n            title: '账号Id',\n            validate: [{\n              required: true,\n              message: '不能为空'\n            }]\n          }],\n          code: \"public function getSpotBalanceById($taid)\\n{\\n    try {\\n        $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\\n        if(empty($exInfo))\\n            throw new \\\\Exception('\\u8D26\\u6237\\u4E0D\\u5B58\\u572822.');\\n\\n        $balance = $this->getPositionSpot(self::ALL_SYMBOL, $exInfo);\\n\\n        return $this->ret($balance);\\n    } catch (\\\\Exception $e) {\\n        return $this->err($e->getMessage());\\n    }\\n}\"\n        }, {\n          title: '杠杆资产',\n          func: 'getMarginBalanceById',\n          rules: [{\n            type: 'input',\n            field: 'taid',\n            title: '账号Id',\n            validate: [{\n              required: true,\n              message: '不能为空'\n            }]\n          }],\n          code: \"public function getMarginBalanceById($taid)\\n{\\n    try {\\n        $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\\n        if(empty($exInfo))\\n            throw new \\\\Exception('\\u8D26\\u6237\\u4E0D\\u5B58\\u5728.');\\n\\n        $balance = $this->getMarginBalance(self::ALL_SYMBOL, $exInfo, true);\\n\\n        return $this->ret($balance);\\n    } catch (\\\\Exception $e) {\\n        return $this->err($e->getMessage());\\n    }\\n}\"\n        }, {\n          title: '杠杆信息',\n          func: 'getMarginInfoById',\n          rules: [{\n            type: 'input',\n            field: 'taid',\n            title: '账号Id',\n            validate: [{\n              required: true,\n              message: '不能为空'\n            }]\n          }, {\n            type: 'select',\n            field: 'mode',\n            title: '模式',\n            value: 'all',\n            options: [{\n              value: 'all',\n              label: '全部'\n            }, {\n              value: 'crossed',\n              label: '全仓'\n            }, {\n              value: 'fixed',\n              label: '逐仓'\n            }],\n            validate: [{\n              required: true,\n              message: '不能为空'\n            }]\n          }],\n          code: \"/**\\n * @desc\\n * @param $taid\\n * @param string $mode [ all | fixed | crossed ]\\n * @author wmc\\n * @date 2019-11-15 11:49\\n * \\\"fixed\\\" => [...],\\n * \\\"crossed\\\" => [...],\\n */\\npublic function getMarginInfoById($taid, $mode = 'all')\\n{\\n    try {\\n        $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\\n        if(empty($exInfo))\\n            throw new \\\\Exception('\\u8D26\\u6237\\u4E0D\\u5B58\\u5728.');\\n\\n        $balance = $this->AccountSource->fetchMarginBalanceRaw($exInfo);\\n\\n        return $this->ret($balance);\\n    } catch (\\\\Exception $e) {\\n        return $this->err($e->getMessage());\\n    }\\n}\"\n        }]\n      },\n      future: {\n        colSpan: 12,\n        config: [{\n          title: '交割资产',\n          func: 'getFutureBalanceById',\n          rules: [{\n            type: 'input',\n            field: 'taid',\n            title: '账号Id',\n            validate: [{\n              required: true,\n              message: '不能为空'\n            }]\n          }],\n          code: \"/**\\n * @desc  \\u671F\\u8D27\\n * @param $taid\\n * @author wmc\\n * @date 2019-11-06 17:28\\n */\\npublic function getFutureBalanceById($taid)\\n{\\n    try {\\n        $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\\n        if(empty($exInfo))\\n            throw new \\\\Exception('\\u8D26\\u6237\\u4E0D\\u5B58\\u5728.');\\n\\n        $balance = $this->getFutureBalance(self::ALL_SYMBOL, $exInfo);\\n\\n        return $this->ret($balance);\\n    } catch (\\\\Exception $e) {\\n        return $this->err($e->getMessage());\\n    }\\n}\"\n        }, {\n          title: '交割仓位',\n          func: 'getFuturePositionAllById',\n          rules: [{\n            type: 'input',\n            field: 'taid',\n            title: '账号Id',\n            validate: [{\n              required: true,\n              message: '不能为空'\n            }]\n          }],\n          code: \"/**\\n * @desc  \\u671F\\u8D27\\u4ED3\\u4F4D all\\n * @param $taid\\n * @author wmc\\n * @date 2019-11-06 17:36\\n */\\npublic function getFuturePositionAllById($taid)\\n{\\n    try {\\n        $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\\n        if(empty($exInfo))\\n            throw new \\\\Exception('\\u8D26\\u6237\\u4E0D\\u5B58\\u5728.');\\n\\n        $position = $this->getPositionFutureAll($exInfo);\\n\\n        return $this->ret($position);\\n    } catch (\\\\Exception $e) {\\n        return $this->err($e->getMessage());\\n    }\\n}\"\n        }]\n      },\n      swap: {\n        colSpan: 12,\n        config: [{\n          title: '永续资产',\n          func: 'getSwapBalanceById',\n          rules: [{\n            type: 'input',\n            field: 'taid',\n            title: '账号Id',\n            validate: [{\n              required: true,\n              message: '不能为空'\n            }]\n          }],\n          code: \"/**\\n * @desc  \\u6C38\\u7EED\\n * @param $taid\\n * @author wmc\\n * @date 2019-11-06 17:28\\n */\\npublic function getSwapBalanceById($taid)\\n{\\n    try {\\n        $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\\n        if(empty($exInfo))\\n            throw new \\\\Exception('\\u8D26\\u6237\\u4E0D\\u5B58\\u5728.');\\n\\n        $balance = $this->getSwapBalance(self::ALL_SYMBOL, $exInfo);\\n\\n        return $this->ret($balance);\\n    } catch (\\\\Exception $e) {\\n        return $this->err($e->getMessage());\\n    }\\n}\"\n        }, {\n          title: '永续仓位',\n          func: 'getSwapPositionAllById',\n          rules: [{\n            type: 'input',\n            field: 'taid',\n            title: '账号Id',\n            validate: [{\n              required: true,\n              message: '不能为空'\n            }]\n          }],\n          code: \"/**\\n * @desc  \\u6C38\\u7EED\\u4ED3\\u4F4D all\\n * @param $taid\\n * @author wmc\\n * @date 2019-11-06 17:34\\n */\\npublic function getSwapPositionAllById($taid)\\n{\\n    try {\\n        $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\\n        if(empty($exInfo))\\n            throw new \\\\Exception('\\u8D26\\u6237\\u4E0D\\u5B58\\u5728.');\\n\\n        $position = $this->getPositionSwapAll($exInfo);\\n\\n        return $this->ret($position);\\n    } catch (\\\\Exception $e) {\\n        return $this->err($e->getMessage());\\n    }\\n}\"\n        }]\n      }\n    };\n  },\n  components: {\n    AccountsTestUnit: AccountsTestUnit\n  },\n  methods: {}\n};",{"version":3,"sources":["AccountsNew.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n\r\n<div>\r\n    <el-row :gutter=\"5\">\r\n        <el-col :span=\"spot.colSpan\" v-for=\"params in spot.config\">\r\n            <accounts-test-unit :title=\"params.title\" :func=\"params.func\" :rules=\"params.rules\">\r\n                <template v-slot:u-code>{{params.code}}</template>\r\n            </accounts-test-unit>\r\n        </el-col>\r\n    </el-row>\r\n\r\n    <el-row :gutter=\"5\">\r\n        <el-col :span=\"future.colSpan\" v-for=\"params in future.config\">\r\n            <accounts-test-unit :title=\"params.title\" :func=\"params.func\" :rules=\"params.rules\">\r\n                <template v-slot:u-code>{{params.code}}</template>\r\n            </accounts-test-unit>\r\n        </el-col>\r\n    </el-row>\r\n\r\n    <el-row :gutter=\"5\">\r\n        <el-col :span=\"swap.colSpan\" v-for=\"params in swap.config\">\r\n            <accounts-test-unit :title=\"params.title\" :func=\"params.func\" :rules=\"params.rules\">\r\n                <template v-slot:u-code>{{params.code}}</template>\r\n            </accounts-test-unit>\r\n        </el-col>\r\n    </el-row>\r\n</div>\r\n\r\n</template>\r\n\r\n\r\n<script>\r\n    import AccountsTestUnit from \"../common/AccountsTestUnit\";\r\n    export default {\r\n\r\n        data () {\r\n            return {\r\n                spot: {\r\n                    colSpan: 8,\r\n                    config: [\r\n                        {\r\n                            title: '现货资产',\r\n                            func: 'getSpotBalanceById',\r\n\r\n                            rules: [\r\n                                {\r\n                                    type:'input',\r\n                                    field:'taid',\r\n                                    title:'账号Id',\r\n                                    validate: [{required: true, message:'不能为空'}]\r\n                                }\r\n                            ],\r\n                            code: `public function getSpotBalanceById($taid)\r\n    {\r\n        try {\r\n            $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\r\n            if(empty($exInfo))\r\n                throw new \\\\Exception('账户不存在22.');\r\n\r\n            $balance = $this->getPositionSpot(self::ALL_SYMBOL, $exInfo);\r\n\r\n            return $this->ret($balance);\r\n        } catch (\\\\Exception $e) {\r\n            return $this->err($e->getMessage());\r\n        }\r\n    }`,\r\n                        },\r\n                        {\r\n                            title: '杠杆资产',\r\n                            func: 'getMarginBalanceById',\r\n\r\n                            rules: [\r\n                                {\r\n                                    type:'input',\r\n                                    field:'taid',\r\n                                    title:'账号Id',\r\n                                    validate: [{required: true, message:'不能为空'}]\r\n                                }\r\n                            ],\r\n                            code: `public function getMarginBalanceById($taid)\r\n    {\r\n        try {\r\n            $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\r\n            if(empty($exInfo))\r\n                throw new \\\\Exception('账户不存在.');\r\n\r\n            $balance = $this->getMarginBalance(self::ALL_SYMBOL, $exInfo, true);\r\n\r\n            return $this->ret($balance);\r\n        } catch (\\\\Exception $e) {\r\n            return $this->err($e->getMessage());\r\n        }\r\n    }`,\r\n                        },\r\n                        {\r\n                            title: '杠杆信息',\r\n                            func: 'getMarginInfoById',\r\n\r\n                            rules: [\r\n                                {\r\n                                    type:'input',\r\n                                    field:'taid',\r\n                                    title:'账号Id',\r\n                                    validate: [{required: true, message:'不能为空'}]\r\n                                },\r\n                                {\r\n                                    type:'select',\r\n                                    field:'mode',\r\n                                    title:'模式',\r\n                                    value: 'all',\r\n                                    options: [\r\n                                        {value: 'all', label: '全部'},\r\n                                        {value: 'crossed', label: '全仓'},\r\n                                        {value: 'fixed', label: '逐仓'},\r\n                                    ],\r\n                                    validate: [{required: true, message:'不能为空'}]\r\n                                },\r\n\r\n                            ],\r\n                            code: `/**\r\n     * @desc\r\n     * @param $taid\r\n     * @param string $mode [ all | fixed | crossed ]\r\n     * @author wmc\r\n     * @date 2019-11-15 11:49\r\n     * \"fixed\" => [...],\r\n     * \"crossed\" => [...],\r\n     */\r\n    public function getMarginInfoById($taid, $mode = 'all')\r\n    {\r\n        try {\r\n            $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\r\n            if(empty($exInfo))\r\n                throw new \\\\Exception('账户不存在.');\r\n\r\n            $balance = $this->AccountSource->fetchMarginBalanceRaw($exInfo);\r\n\r\n            return $this->ret($balance);\r\n        } catch (\\\\Exception $e) {\r\n            return $this->err($e->getMessage());\r\n        }\r\n    }`,\r\n                        },\r\n\r\n                    ]\r\n                },\r\n\r\n                future: {\r\n                    colSpan: 12,\r\n                    config: [\r\n                        {\r\n                            title: '交割资产',\r\n                            func: 'getFutureBalanceById',\r\n\r\n                            rules: [\r\n                                {\r\n                                    type:'input',\r\n                                    field:'taid',\r\n                                    title:'账号Id',\r\n                                    validate: [{required: true, message:'不能为空'}]\r\n                                }\r\n                            ],\r\n                            code: `/**\r\n     * @desc  期货\r\n     * @param $taid\r\n     * @author wmc\r\n     * @date 2019-11-06 17:28\r\n     */\r\n    public function getFutureBalanceById($taid)\r\n    {\r\n        try {\r\n            $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\r\n            if(empty($exInfo))\r\n                throw new \\\\Exception('账户不存在.');\r\n\r\n            $balance = $this->getFutureBalance(self::ALL_SYMBOL, $exInfo);\r\n\r\n            return $this->ret($balance);\r\n        } catch (\\\\Exception $e) {\r\n            return $this->err($e->getMessage());\r\n        }\r\n    }`,\r\n                        },\r\n                        {\r\n                            title: '交割仓位',\r\n                            func: 'getFuturePositionAllById',\r\n\r\n                            rules: [\r\n                                {\r\n                                    type:'input',\r\n                                    field:'taid',\r\n                                    title:'账号Id',\r\n                                    validate: [{required: true, message:'不能为空'}]\r\n                                }\r\n                            ],\r\n                            code: `/**\r\n     * @desc  期货仓位 all\r\n     * @param $taid\r\n     * @author wmc\r\n     * @date 2019-11-06 17:36\r\n     */\r\n    public function getFuturePositionAllById($taid)\r\n    {\r\n        try {\r\n            $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\r\n            if(empty($exInfo))\r\n                throw new \\\\Exception('账户不存在.');\r\n\r\n            $position = $this->getPositionFutureAll($exInfo);\r\n\r\n            return $this->ret($position);\r\n        } catch (\\\\Exception $e) {\r\n            return $this->err($e->getMessage());\r\n        }\r\n    }`,\r\n                        },\r\n                    ],\r\n                },\r\n\r\n                swap: {\r\n                    colSpan: 12,\r\n                    config: [\r\n                        {\r\n                            title: '永续资产',\r\n                            func: 'getSwapBalanceById',\r\n\r\n                            rules: [\r\n                                {\r\n                                    type:'input',\r\n                                    field:'taid',\r\n                                    title:'账号Id',\r\n                                    validate: [{required: true, message:'不能为空'}]\r\n                                }\r\n                            ],\r\n                            code: `/**\r\n     * @desc  永续\r\n     * @param $taid\r\n     * @author wmc\r\n     * @date 2019-11-06 17:28\r\n     */\r\n    public function getSwapBalanceById($taid)\r\n    {\r\n        try {\r\n            $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\r\n            if(empty($exInfo))\r\n                throw new \\\\Exception('账户不存在.');\r\n\r\n            $balance = $this->getSwapBalance(self::ALL_SYMBOL, $exInfo);\r\n\r\n            return $this->ret($balance);\r\n        } catch (\\\\Exception $e) {\r\n            return $this->err($e->getMessage());\r\n        }\r\n    }`,\r\n                        },\r\n                        {\r\n                            title: '永续仓位',\r\n                            func: 'getSwapPositionAllById',\r\n\r\n                            rules: [\r\n                                {\r\n                                    type:'input',\r\n                                    field:'taid',\r\n                                    title:'账号Id',\r\n                                    validate: [{required: true, message:'不能为空'}]\r\n                                }\r\n                            ],\r\n                            code: `/**\r\n     * @desc  永续仓位 all\r\n     * @param $taid\r\n     * @author wmc\r\n     * @date 2019-11-06 17:34\r\n     */\r\n    public function getSwapPositionAllById($taid)\r\n    {\r\n        try {\r\n            $exInfo = $this->getSummaryAccount($this->regnumber, $taid);\r\n            if(empty($exInfo))\r\n                throw new \\\\Exception('账户不存在.');\r\n\r\n            $position = $this->getPositionSwapAll($exInfo);\r\n\r\n            return $this->ret($position);\r\n        } catch (\\\\Exception $e) {\r\n            return $this->err($e->getMessage());\r\n        }\r\n    }`,\r\n                        },\r\n                    ],\r\n                }\r\n            }\r\n        },\r\n        components: {\r\n            AccountsTestUnit,\r\n        },\r\n        methods: {\r\n\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\nh1{\r\n    text-align: center;\r\n    margin: 30px 0;\r\n}\r\np{\r\n    line-height: 30px;\r\n    margin-bottom: 10px;\r\n    text-indent: 2em;\r\n}\r\n.logout{\r\n    color: #409EFF;\r\n}\r\n.mt-5 {\r\n    margin-top: 5px;\r\n}\r\n\r\n.el-row {\r\n    margin-bottom: 20px;\r\n\r\n}\r\n.el-col {\r\n    border-radius: 4px;\r\n}\r\n.bg-purple-dark {\r\n    background: #99a9bf;\r\n}\r\n.bg-purple {\r\n    background: #d3dce6;\r\n}\r\n.bg-purple-light {\r\n    background: #e5e9f2;\r\n}\r\n.grid-content {\r\n    border-radius: 4px;\r\n    min-height: 36px;\r\n}\r\n.row-bg {\r\n    padding: 10px 0;\r\n    background-color: #f9fafc;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/components/page"}]}